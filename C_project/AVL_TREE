#include<stdio.h>
#include<stdlib.h>
    struct Node{
        int data;
        struct Node* left;
        struct Node* right;
        int height;
    };
//height function]
int getHeight(struct Node* n){
    if(n==NULL){
        return 0;
    }
    else{
        return n->height;
    }
}
//function to insert value in a tree
    struct Node*  createNode(int value){
        struct Node* newnode=(struct Node*)malloc(sizeof(struct Node));
        newnode->data=value;
        newnode->left=NULL;
        newnode->right=NULL;
        newnode->height=1;
        return newnode;
    }
    //max function
    int max(int a, int b){
        return a>b?a:b;
    }
//function to find balance factor
int balanceFActor(struct Node* n){
    if(n==NULL){
        return 0;
    }
    else{
        return getHeight(n->left)-getHeight(n->right);
    }
}
//left rotate 
struct Node* RightRotate(struct Node* y){
    struct Node* x=y->left;
    struct Node* T2=x->right;

    x->right=y;
    y->left=T2;

    y->height=max(getHeight(y->right),getHeight(y->left))+1;
    x->height=max(getHeight(x->right),getHeight(x->left))+1;

    return x;
}
//right rotate 
struct Node* LeftRotate(struct Node* x){
    struct Node* y=x->right;
    struct Node* T2=y->left;

    y->left=x;
    x->right=T2;

    y->height=max(getHeight(y->right),getHeight(y->left))+1;
    x->height=max(getHeight(x->right),getHeight(x->left))+1;

    return y;
}
//insert function
    struct Node* insert(struct Node* root, int value){
        if(root==NULL){
            return createNode(value);
        }
        else if(value<root->data){
            root->left=insert(root->left,value);
        }else if(value>root->data){
            root->right=insert(root->right,value);
        }else{   
            //duplicate value, do not insert
        return root;
        }
        //update height
        root->height=1 + max(getHeight(root->left),getHeight(root->right));
        int bf=balanceFActor(root);
        //left left case
        if(bf>1 && value < root->left->data){
            return RightRotate(root);
        }
        //right right case
        if(bf<-1 && value > root->right->data){
            return LeftRotate(root);
        }
        //left right case
        if(bf>1 && value > root->left->data){
            root->left=LeftRotate(root->left);
            return RightRotate(root);
        }
        //right left case
        if(bf<-1 && value<root->right->data){
            root->right=RightRotate(root->right);
            return LeftRotate(root);
        }
        return root;
    } 
    //traversal
    void preorder(struct Node* ptr){
        if(ptr==NULL){
            return;
        }
        else{
            printf("%d ",ptr->data);
            preorder(ptr->left);
            preorder(ptr->right);
        }

    }
int main()
{
    struct Node* root=NULL;
    root=insert(root,1);
    root=insert(root,2);
    root=insert(root,3);
    root=insert(root,4);
    root=insert(root,5);
    root=insert(root,6);
    root=insert(root,3);
    preorder(root);
return 0;
}
